#/usr/local/bin/python3
import random
import numpy as np
from types import SimpleNamespace

import torch
from torch import nn
from graph_trans import TransformerConvBlock, GraphEncoder

# helper functions
def set_seed(seed):
    if seed is not None:
        random.seed(seed)
        np.random.seed(seed)
        torch.manual_seed(seed)
        torch.cuda.manual_seed_all(seed)

# global
config = SimpleNamespace(
    n_embd=6,
    layer_norm_epsilon=1e-5,
    n_head=1,
    n_layer=3,
    vocab_size=5,
)

# to check transformer block
def test_block_multi_batch():
    set_seed(4)
    gcn = TransformerConvBlock(config)

    x = torch.Tensor(np.random.randn(2, 4, config.n_embd))
    edge_attr = torch.Tensor(np.random.randn(2, 4, config.n_embd))
    edge_index = torch.Tensor([
        [[1, 1, 1, 1], [1, 1, 1, 1]],
        [[1, 1, 1, 2], [0, 3, 2, 3]]
    ]).long()

    xout, _, _ = gcn((x, edge_index, edge_attr))
    print(xout.tolist())

    assert torch.all(xout.eq(torch.Tensor([
            [[0.050561707466840744, 0.4999513328075409, -0.9959089159965515, 0.6935985088348389, -0.418301522731781, -1.584577202796936],
             [-0.7937180995941162, -1.106133222579956, 0.44062554836273193, 1.7234091758728027, -0.2843667268753052, -0.6111571192741394],
             [-0.7937180995941162, -1.106133222579956, 0.44062554836273193, 1.7234091758728027, -0.2843667268753052, -0.6111571192741394],
             [0.7233415842056274, 0.046135567128658295, -0.982991635799408, 0.054432738572359085, 0.15989293158054352, -1.2089481353759766]],
            [[-1.6306322813034058, -0.4314936697483063, -0.7632365822792053, 1.6937806606292725, 1.2151427268981934, 0.5345135927200317],
             [-0.6512258052825928, 0.5424513220787048, 0.048006247729063034, -2.3580737113952637, -1.1055840253829956, 0.8378363251686096],
             [-1.7054204940795898, -0.45000943541526794, -0.751650333404541, 1.595362663269043, 1.4557619094848633, 0.5278434753417969],
             [-1.672410249710083, -0.46882784366607666, -0.6747239232063293, 1.3832135200500488, 1.6389029026031494, 0.49822092056274414]]
    ]))).item(), "Failed in output value"



def test_network():
    set_seed(4)
    emb = nn.Embedding(config.vocab_size, config.n_embd)
    G = GraphEncoder(config, emb)
    assert G.num_params == 1596, "Failed in number of parameters"

    x = torch.Tensor([
        [0, 1, 2, 3, 4],
        [1, 1, 3, 4, 4],
    ]).long()
    edge_attr = torch.Tensor(np.random.randn(2, 5, config.n_embd))
    edge_index = torch.Tensor([
        [[1, 2, 1, 2, 3], [1, 1, 2, 2, 1]],
        [[1, 1, 1, 2, 2], [0, 3, 3, 2, 1]],
    ]).long()

    xout = G(x, edge_index, edge_attr)

    assert torch.all(xout.eq(torch.Tensor(
        [[[-0.9414165019989014, 1.263246774673462, -0.18376938998699188, 0.1505054533481598, 0.10750222951173782, -0.2780323326587677],
           [1.0923610925674438, -0.2815122902393341, 0.3106555640697479, -0.21326197683811188, -2.0900630950927734, 1.0180888175964355],
           [1.1169564723968506, 0.018754273653030396, -0.1118837296962738, -0.26393410563468933, -1.9563661813735962, 1.2041208744049072],
           [2.3693323135375977, 0.28294411301612854, -0.23453952372074127, 1.6892435550689697, -1.2768363952636719, -1.4579848051071167],
           [-0.6947864890098572, -1.3185855150222778, -0.9693860411643982, 0.6402537226676941, 0.8201234340667725, -0.9151106476783752]],
         [[0.9670416712760925, -1.0956016778945923, 0.542287290096283, 0.07021015882492065, -1.7304646968841553, 1.0995837450027466],
          [0.9684922695159912, -1.0967350006103516, 0.5420413017272949, 0.0697319507598877, -1.7289456129074097, 1.098783254623413],
          [0.968491792678833, -1.096734881401062, 0.5420413613319397, 0.06973215937614441, -1.7289460897445679, 1.0987834930419922],
          [0.9670412540435791, -1.0956013202667236, 0.5422873497009277, 0.07021030783653259, -1.7304649353027344, 1.0995838642120361],
          [-0.6947864890098572, -1.3185855150222778, -0.9693860411643982, 0.6402537226676941, 0.8201234340667725, -0.9151106476783752]]]
    ))).item(), "Failed in output value"
