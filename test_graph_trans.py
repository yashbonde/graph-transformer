#/usr/local/bin/python3
import random
import numpy as np
from types import SimpleNamespace

import torch
from torch import nn
from graph_trans import TransformerConvBlock, GraphEncoder

# helper functions
def set_seed(seed):
    if seed is not None:
        random.seed(seed)
        np.random.seed(seed)
        torch.manual_seed(seed)
        torch.cuda.manual_seed_all(seed)

# global
config = SimpleNamespace(
    n_embd=6,
    layer_norm_epsilon=1e-5,
    n_head=1,
    n_layer=3,
    vocab_size=5,
)

# to check transformer block
def test_block_multi_batch():
    set_seed(4)
    gcn = TransformerConvBlock(config)

    x = torch.Tensor(np.random.randn(2, 4, config.n_embd))
    edge_attr = torch.Tensor(np.random.randn(2, 4, config.n_embd))
    edge_index = torch.Tensor([
        [[1, 1, 1, 1], [1, 1, 1, 1]],
        [[1, 1, 1, 2], [0, 3, 2, 3]]
    ]).long()

    xout, _, _ = gcn((x, edge_index, edge_attr))
    print(xout.tolist())

    assert torch.all(xout.eq(torch.Tensor([
            [[[0.4255472421646118, 0.9830754995346069, -0.8727403879165649, 1.2233209609985352, -0.15614071488380432, -1.603062629699707],
            [-0.8204825520515442, -0.9140370488166809, 0.5056403279304504, 1.695788025856018, -0.5287204384803772, -0.5153964757919312],
            [-0.820482611656189, -0.9140371084213257, 0.5056403279304504, 1.695788025856018, -0.5287204384803772, -0.5153964757919312],
            [1.368733286857605, 0.3663361072540283, -1.156973123550415, 0.3786175549030304, 0.5347192287445068, -1.4914329051971436]],
            [[-1.7269127368927002, -0.6625702381134033, -0.4091358780860901, 1.7700309753417969, 0.9623953700065613, 0.2844439148902893],
            [-0.18833383917808533, 0.9165951013565063, 0.45891132950782776, -1.768280029296875, -0.6089111566543579, 1.190018653869629],
            [-1.8034559488296509, -0.6211704611778259, -0.5263601541519165, 1.6079857349395752, 1.434124231338501, 0.3676066994667053],
            [-1.6849391460418701, -0.5552942752838135, -0.5359675288200378, 1.3362914323806763, 1.5824973583221436, 0.39063549041748047]]]
    ]))).item(), "Failed in output value"



def test_network():
    set_seed(4)
    emb = nn.Embedding(config.vocab_size, config.n_embd)
    G = GraphEncoder(config)
    assert G.num_params == 1566, "Failed in number of parameters"

    x = torch.Tensor([
        [0, 1, 2, 3, 4],
        [1, 1, 3, 4, 4],
    ]).long()
    edge_attr = torch.Tensor(np.random.randn(2, 5, config.n_embd))
    edge_index = torch.Tensor([
        [[1, 2, 1, 2, 3], [1, 1, 2, 2, 1]],
        [[1, 1, 1, 2, 2], [0, 3, 3, 2, 1]],
    ]).long()
    x = emb(x)  # get embeddings
    xout = G(x, edge_index, edge_attr)

    print(xout.tolist())

    assert torch.all(xout.eq(torch.Tensor(
        [[[-1.4530184268951416, 1.8800917863845825, -0.30757302045822144, 0.19779890775680542, 0.1327846795320511, -0.45008397102355957],
        [0.953833818435669, -0.5452278852462769, 0.4939934313297272, -0.14475847780704498, -2.021592140197754, 1.078058123588562],
        [1.03120756149292, -0.2621003985404968, 0.07627351582050323, -0.2453654408454895, -1.9297397136688232, 1.2727758884429932],
        [1.5108495950698853, 0.038289979100227356, -0.3269467055797577, 1.030847191810608, -1.0625933408737183, -1.1904466152191162],
        [-0.34943827986717224, -1.1048996448516846, -0.6819963455200195, 1.2673827409744263, 1.4852168560028076, -0.6162652969360352]],
        [[0.837190568447113, -1.243005394935608, 0.5958355069160461, 0.1527310162782669, -1.6276718378067017, 1.1616661548614502],
        [0.8373849391937256, -1.2449227571487427, 0.5964004993438721, 0.15334546566009521, -1.6256968975067139, 1.1608401536941528],
        [0.837384819984436, -1.244922399520874, 0.5964004397392273, 0.15334537625312805, -1.6256968975067139, 1.1608400344848633],
        [0.8371905088424683, -1.2430050373077393, 0.5958355069160461, 0.15273086726665497, -1.6276723146438599, 1.1616662740707397],
        [-0.34943827986717224, -1.1048996448516846, -0.6819963455200195, 1.2673827409744263, 1.4852168560028076, -0.6162652969360352]]]
    ))).item(), "Failed in output value"

# def test_dry_run():
